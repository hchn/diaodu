package com.jiaxun.uil.ui.fragment;

import java.util.ArrayList;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Spinner;

import com.jiaxun.sdk.scl.model.VsModel;
import com.jiaxun.sdk.util.constant.CommonConstantEntry;
import com.jiaxun.sdk.util.log.Log;
import com.jiaxun.uil.R;
import com.jiaxun.uil.UiApplication;
import com.jiaxun.uil.model.VsListItem;
import com.jiaxun.uil.module.surveillance.impl.UilVsServiceImpl;
import com.jiaxun.uil.ui.adapter.VsListAdapter;
import com.jiaxun.uil.ui.view.DraggableGridView;
import com.jiaxun.uil.util.ToastUtil;
import com.jiaxun.uil.util.UiEventEntry;
import com.jiaxun.uil.util.UiUtils;
import com.jiaxun.uil.util.enums.EnumVsEditType;
import com.jiaxun.uil.util.eventnotify.EventNotifyHelper;
import com.jiaxun.uil.util.eventnotify.EventNotifyHelper.NotificationCenterDelegate;

/**
 * 说明：监控列表界面
 * 
 * @author zhangxd
 * 
 * @Date 2015-5-27
 */
public class VsListFragment extends BaseFragment implements OnClickListener, OnItemClickListener, OnItemSelectedListener,
        NotificationCenterDelegate
{
    private static final String TAG = VsListFragment.class.getName();
    private DraggableGridView groupGrid;
    public static VsListAdapter vsListAdapter;
    private Spinner spinner_time;
    private Handler mHandler;
    /**
     * 普通状态
     */
    private LinearLayout linearLayout_normal;
    /**
     * 删除用户状态
     */
    private LinearLayout linearLayout_delete;
    /**
     * 添加监控用户
     */
    private Button add_vs_user;
    /**
     *  轮巡开启按钮
     */
    private Button buttonStart;
    /**
     * 确定删除选中用户
     */
    private Button sureDelete;
    /**
     * 取消删除选中用户
     */
    private Button cancelDelete;
    /**
     *  删除全部用户
     */
    private Button selectAll;
    private Button removeVsUser;
    private Button finishVs;
    public static final int UPDATE_LIST_ITEM = 1;
    private UilVsServiceImpl uilVsService;
    private ArrayList<VsListItem> vsList;
    private int itemIndex = -1;
    private int timePeriod = 15;// 默认15秒

    public VsListFragment()
    {
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.NOTIFY_VS_STATUS_CHANGE);
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.UPDATE_VSLIST);
        uilVsService = UilVsServiceImpl.getInstance();
        vsList = uilVsService.getVsUserList();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        EventNotifyHelper.getInstance().postNotificationName(UiEventEntry.EVENT_UPDATE_RIGHT_TAB, UiEventEntry.TAB_VS_LIST);
        // 注册窗口改变观察者
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.VIDEO_WINDOW_CHANGE);
        if (uilVsService != null)
        {
            if (uilVsService.isLoopStarted())
            {
                buttonStart.setText("停止");
            }
            else
            {
                buttonStart.setText("开始");
            }
        }
        return super.onCreateView(inflater, container, savedInstanceState);
    }

    @Override
    public void initComponentViews(View view)
    {
        groupGrid = (DraggableGridView) view.findViewById(R.id.group_grid);
        groupGrid.setType(CommonConstantEntry.CALL_TYPE_VIDEO_SURVEILLANCE);
        add_vs_user = (Button) view.findViewById(R.id.add_vs_user);
        
        buttonStart = (Button) view.findViewById(R.id.buttonStart);
        sureDelete = (Button) view.findViewById(R.id.sureDelete);
        cancelDelete = (Button) view.findViewById(R.id.cancelDelete);
        selectAll = (Button) view.findViewById(R.id.selectAll);
        removeVsUser = (Button) view.findViewById(R.id.removeVsUser);
        finishVs = (Button) view.findViewById(R.id.vs_finish);
        spinner_time = (Spinner) view.findViewById(R.id.spinner_time);
        linearLayout_normal = (LinearLayout) view.findViewById(R.id.linearLayout_normal);
        linearLayout_delete = (LinearLayout) view.findViewById(R.id.linearLayout_delete);
        // switchBtn.setOnClickListener(this);
        vsListAdapter = new VsListAdapter(getActivity(), this, vsList, groupGrid);
        groupGrid.setAdapter(vsListAdapter);
        ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(getActivity(), R.layout.simple_spinner_item);
        String screenTime[] = getResources().getStringArray(R.array.circletime);// 资源文件
        for (int i = 0; i < screenTime.length; i++)
        {
            arrayAdapter.add(screenTime[i]);
        }
        arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner_time.setAdapter(arrayAdapter);
        groupGrid.setOnItemClickListener(this);
        add_vs_user.setOnClickListener(this);
        buttonStart.setOnClickListener(this);
        sureDelete.setOnClickListener(this);
        cancelDelete.setOnClickListener(this);
        selectAll.setOnClickListener(this);
        removeVsUser.setOnClickListener(this);
        finishVs.setOnClickListener(this);
        spinner_time.setOnItemSelectedListener(this);
    }

    @Override
    public void onDestroy()
    {
        // 注销窗口改变观察者
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.VIDEO_WINDOW_CHANGE);
        super.onDestroy();
    }

    @Override
    public int getLayoutView()
    {
        return R.layout.fragment_vs_list;
    }

    /**
     * 方法说明 : 看是否监控列表中存在这个号码的用户
     * @param number
     * @param status
     * @param vsModel
     * @return 
     * @author zhangxd
     * @Date 2015-6-12
     */
    private VsListItem getExistedCall(String number, int status, VsModel vsModel)
    {
        VsListItem vsListItem = null;
        itemIndex = -1;
        if (TextUtils.isEmpty(number))
        {
            return null;
        }
        for (int i = 0; i < vsList.size(); i++)
        {
            vsListItem = vsList.get(i);
            if (number.equals(vsListItem.getVsModel().getVideoNum()))
            {
                itemIndex = i;
                break;
            }
            else
            {
                vsListItem = null;
            }
        }
        return vsListItem;
    }

    @Override
    public void onClick(View v)
    {
        switch (v.getId())
        {
            case R.id.removeVsUser:
                if (uilVsService.isLoopStarted())
                {
                    ToastUtil.showToast("提示", "请停止轮巡后，再移除用户");
                }
                else
                {
//                    if (vsListAdapter.getEditType() == EnumVsEditType.SELECT)
//                    {
//                        removeVsUser.setText("移除用户");
//                        vsListAdapter.setEditType(EnumVsEditType.NORMAL);
//                        vsListAdapter.notifyDataSetChanged();
//                        linearLayout_normal.setVisibility(View.VISIBLE);
//                        linearLayout_delete.setVisibility(View.GONE);
//                        for (int i = 0; i < vsList.size(); i++)
//                        {
//                            vsList.get(i).setSelected(false);
//                        }
//                        vsListAdapter.notifyDataSetChanged();
//                    }
//                    else 
                    if (vsListAdapter.getEditType() == EnumVsEditType.NORMAL)
                    {
                        linearLayout_normal.setVisibility(View.GONE);
                        linearLayout_delete.setVisibility(View.VISIBLE);
                        vsListAdapter.setEditType(EnumVsEditType.SELECT);
                        vsListAdapter.notifyDataSetChanged();
                    }
                }
                break;
            case R.id.vs_finish:
                if (uilVsService.isLoopStarted())
                {
                    ToastUtil.showToast("提示", "请停止轮巡后，结束监控");
                }else
                {
                    closeAllVideo();
                }
                break;
            case R.id.cancelDelete:
                if (vsListAdapter.getEditType() == EnumVsEditType.SELECT)
                {
                    linearLayout_normal.setVisibility(View.VISIBLE);
                    linearLayout_delete.setVisibility(View.GONE);
                    vsListAdapter.setEditType(EnumVsEditType.NORMAL);
                    vsListAdapter.notifyDataSetChanged();
                }
                break;
            case R.id.sureDelete:
                ArrayList<String> deleteUserNumberList = new ArrayList<String>();
                for (VsListItem vsListItem : vsList)
                {
                    if (vsListItem.isSelected())
                    {
                        deleteUserNumberList.add(vsListItem.getVsModel().getVideoNum());
                    }
                }
                uilVsService.deleteVsUsers(deleteUserNumberList);
                // 如果删除后发现监控列表为空，按钮恢复原始状态
                if (vsList.size() == 0)
                {
                    vsListAdapter.setEditType(EnumVsEditType.NORMAL);
                    vsListAdapter.notifyDataSetChanged();
                    linearLayout_normal.setVisibility(View.VISIBLE);
                    linearLayout_delete.setVisibility(View.GONE);
                }
                vsListAdapter.notifyDataSetChanged();
                break;
            case R.id.selectAll:
                for (int i = 0; i < vsList.size(); i++)
                {
                    vsList.get(i).setSelected(true);
                }
                vsListAdapter.notifyDataSetChanged();
                break;
            case R.id.add_vs_user:
                if (uilVsService.isLoopStarted())
                {
                    ToastUtil.showToast("提示", "请停止轮巡后，再添加用户");
                }
                else
                {
                    EventNotifyHelper.getInstance().postNotificationName(UiEventEntry.EVENT_VS_MEMBER_ADD);
                }
                break;
            case R.id.buttonStart:
                // 如果还没开始轮巡
                if (!uilVsService.isLoopStarted())
                {
                    int windowsCount = UiApplication.getConfigService().getVideoWindowCount();
                    // 自适应屏幕按9分屏
                    if (windowsCount == UiEventEntry.SCREEN_TYPE_AUTO)
                    {
                        windowsCount = UiEventEntry.SCREEN_TYPE_9;
                    }
                    if(vsList.size()==0)
                    {
                        //没有用户时提示用户
                        ToastUtil.showToast("提示", "没有监控用户，请添加用户后再进行轮巡");
                    }else
                    {
                        if (vsList.size() > windowsCount)
                        {
                            closeAllVideo();
                            uilVsService.vsLoopStart(timePeriod);
                            buttonStart.setText("停止");
                            spinner_time.setEnabled(false);
                        }
                        else
                        {
                            ToastUtil.showToast("提示", "用户数量不多于可用窗口数,不用轮巡");
                        }
                    }
                }
                else
                {
                    uilVsService.vsLoopStop();
                    buttonStart.setText("启动");
                    spinner_time.setEnabled(true);
                }
                break;
        }
    }

    @Override
    public void onItemClick(AdapterView<?> arg0, View arg1, int postion, long arg3)
    {
        // 选择删除状态
        if (vsListAdapter.getEditType() == EnumVsEditType.SELECT)
        {
            vsList.get(postion).triggerSelected();
            vsListAdapter.notifyDataSetChanged();
        }
        else
        {
            if (!uilVsService.isLoopStarted())
            {
                VsListItem vsListItem = vsList.get(postion);
                VsModel vsModel = vsListItem.getVsModel();
                // 这个号码已经在窗口打开
                // TODO Auto-generated method stub
                if (vsList.get(postion).isSurfaceviewOn())
                {
                    Log.info(TAG, "Close" + " number: " + vsModel.getSessionId());
                    uilVsService.closeVs(vsModel.getSessionId());
                }
                else
                {
                    Log.info(TAG, "Open:" + " number: " + vsModel.getVideoNum());
                    int windowsCount = UiApplication.getConfigService().getVideoWindowCount();
                    // 自适应屏幕按9分屏
                    if (windowsCount == UiEventEntry.SCREEN_TYPE_AUTO)
                    {
                        windowsCount = UiEventEntry.SCREEN_TYPE_9;
                    }
                    int openedUserCount = uilVsService.getOpenVsCount();
                    // 如果有可用窗口再打开
                    if (openedUserCount < windowsCount)
                    {
                        vsListItem.setOpening(true);
                        vsListAdapter.updateView(vsListItem);
                        // ServiceUtils.makeVSCall(vsList.get(postion).getVsModel().getVideoNum());
                        uilVsService.openVs(vsModel.getVideoNum());
                    }
                }
            }
            else
            {
                ToastUtil.showToast("提示", "轮巡中");
            }
        }
    }

    @Override
    public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2, long arg3)
    {
        // TODO Auto-generated method stub
        switch (arg2)
        {
            case 0:
                timePeriod = 15;
                break;
            case 1:
                timePeriod = 30;
                break;
            case 2:
                timePeriod = 60;
                break;
            default:
                timePeriod = 15;
                break;
        }

    }

    @Override
    public void onNothingSelected(AdapterView<?> arg0)
    {
        // TODO Auto-generated method stub
    }

    @Override
    public void didReceivedNotification(int id, Object... args)
    {
        if (id == UiEventEntry.VIDEO_WINDOW_CHANGE)
        {
            if (uilVsService.isLoopStarted())
            {
                uilVsService.vsLoopStop();
                int windowsCount = UiApplication.getConfigService().getVideoWindowCount();
                // 自适应屏幕按9分屏
                if (windowsCount == UiEventEntry.SCREEN_TYPE_AUTO)
                {
                    windowsCount = UiEventEntry.SCREEN_TYPE_9;
                }
                if (vsList.size() > windowsCount)
                {
                    closeAllVideo();
                    uilVsService.vsLoopStart(timePeriod);
                }
                else
                {
                    buttonStart.setText("启动");
                    spinner_time.setEnabled(true);
                    ToastUtil.showToast("提示", "用户数量不多于可用窗口数,不用轮巡");
                }
            }
        }
        else if (id == UiEventEntry.UPDATE_VSLIST)
        {
           updateListItem((VsListItem) args[0]);
        }
        else if (id == UiEventEntry.NOTIFY_VS_STATUS_CHANGE)
        {
            String sessionId = (String) args[0];
            int status = (Integer) args[1];
            final VsModel vsModel = (VsModel) args[2];
            int reason = (Integer) args[3];
            Log.info(TAG, "onVsStatusChange::sessionId: " + sessionId + ", status:" + status + " reason:" + reason);
            VsListItem vsListItem = getExistedCall(vsModel.getVideoNum(), status, vsModel);
            switch (status)
            {
                case CommonConstantEntry.VS_STATE_CLOSE:
                    Log.info(TAG, "number" + vsModel.getVideoNum() + "，vs over\r\n");
                  //  ToastUtil.showToast("通知", vsModel.getVideoNum() + ":视频监控结束: " + SdkUtil.parseReleaseReason(reason));
                    // 等于
                    if (itemIndex != -1)
                    {
                        vsListItem.setSurfaceviewOn(false);
                        vsListItem.setOpening(false);
                    }
                    // UiUtils.removeRemoteVideo(vsItem.getVsModel().getVideoNum());
                    if (vsListAdapter != null)
                    {
                        updateListItem(vsListItem);
                    }
                    if (vsListItem != null)
                    {
                        UiUtils.removeRemoteVideo(vsListItem.getVsModel().getVideoNum());
                    }
                    break;
                case CommonConstantEntry.VS_STATE_OPEN:
                    Log.info(TAG, "number：" + vsModel.getVideoNum() + "，vs start\r\n");
                    if (vsListItem != null)
                    {
                  //      ToastUtil.showToast("通知", vsModel.getVideoNum() + ":视频监控开启 ");
                        vsListItem.setVsModel(vsModel);
                        vsListItem.setOpening(false);
                        vsListItem.setSurfaceviewOn(true);
                        EventNotifyHelper.getInstance().postNotificationName(UiEventEntry.NOTIFY_SHOW_VS_LIST);
                        if (vsListAdapter != null)
                        {
                            updateListItem(vsListItem);
                        }
                    }
                    else
                    {
                        Log.error(TAG, "vsListItem null");
                    }
                    break;
                case CommonConstantEntry.VS_STATE_OPEN_ACK:
                    Log.info(TAG, "number：" + vsModel.getVideoNum() + "，vs request,wait\r\n");
                    break;
                default:
                    break;
            }
        }
    }

    private void closeAllVideo()
    {
        for (VsListItem vsListItem : vsList)
        {
            if (vsListItem.isSurfaceviewOn())
            {
                uilVsService.closeVs(vsListItem.getVsModel().getSessionId());
                vsListItem.setSurfaceviewOn(false);
            }
        }
    }

    public void setHandler(Handler handler)
    {
        this.mHandler = handler;
    }

    /**
     * 方法说明 :更新单条记录
     * @param callListItem
     * @author zhangxd
     * @Date 2015-7-14
     */
    private void updateListItem(VsListItem vsListItem)
    {
        if (mHandler != null)
        {
            Message msg = new Message();
            msg.what = UPDATE_LIST_ITEM;
            msg.obj = vsListItem;
            mHandler.sendMessage(msg);
        }
    }
}

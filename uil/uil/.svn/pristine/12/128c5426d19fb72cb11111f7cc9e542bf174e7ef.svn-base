package com.jiaxun.uil.ui.fragment;

import java.util.ArrayList;
import java.util.Iterator;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.SeekBar;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.Spinner;
import android.widget.TextView;

import com.jiaxun.sdk.scl.module.device.itf.SclDeviceService;
import com.jiaxun.sdk.util.config.ConfigHelper;
import com.jiaxun.sdk.util.constant.CommonConstantEntry;
import com.jiaxun.sdk.util.constant.CommonEventEntry;
import com.jiaxun.uil.R;
import com.jiaxun.uil.UiApplication;
import com.jiaxun.uil.util.UiConfigEntry;
import com.jiaxun.uil.util.UiEventEntry;
import com.jiaxun.uil.util.eventnotify.EventNotifyHelper;
import com.jiaxun.uil.util.eventnotify.EventNotifyHelper.NotificationCenterDelegate;

/**
 * 说明：云镜控制
 *
 * @author  zhangxd
 *
 * @Date 2015-6-15
 */
public class VideoPtzCtrlFragement extends BaseFragment implements OnItemSelectedListener,NotificationCenterDelegate, OnTouchListener, OnSeekBarChangeListener, Button.OnClickListener
{
    private String videoNum;
    private String sessionId;
    private Button leftUp;
    private Button up;
    private Button rightUp;
    private Button left;
    private Button right;
    private Button leftDown;
    private Button down;
    private Button rightDown;
    private Button zoomOut;// 缩小
    private Button zoomIn;// 放大
    private Button telefocus;// 远焦
    private Button proximityFocused;// 近焦
    private Button returnBack;
    private Button button_cruise;// 查看预设位
    private SeekBar speedSeekBar;
    private Spinner numberSpinner;
    private SclDeviceService sclDeviceService;
    private int ptzSpeed;
    private int tmpPtzSpeed;
    private ArrayList<String> numbers;
    private ConfigHelper configHelper = ConfigHelper.getDefaultConfigHelper(getActivity());
    private String controlNumber;
    private ArrayAdapter<String> arrayAdapter;
    private int NO_CONTROL_USER=0;
    public VideoPtzCtrlFragement()
    {
        sclDeviceService = UiApplication.getDeviceService();
        // TODO Auto-generated constructor stub
    }

    @Override
    public int getLayoutView()
    {
        // TODO Auto-generated method stub
        return R.layout.fragment_ptzcontrol;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        if (getArguments() != null)
        {
            String sessionId = getArguments().getString(CommonConstantEntry.DATA_SESSION_ID);
            String number = getArguments().getString(CommonConstantEntry.DATA_NUMBER);
            setControlPara(number, sessionId);
        }
        return super.onCreateView(inflater, container, savedInstanceState);
    }

    @Override
    public void initComponentViews(View view)
    { // 读取存储速度值
        ptzSpeed = configHelper.getInt(UiConfigEntry.PREF_CONF_PTZ_SPEED, UiConfigEntry.DEFAULT_PREF_CONF_PTZ_SPEED);
        tmpPtzSpeed = ptzSpeed;

        leftUp = (Button) view.findViewById(R.id.button_leftUp);
        up = (Button) view.findViewById(R.id.button_up);
        rightUp = (Button) view.findViewById(R.id.button_rightUp);
        left = (Button) view.findViewById(R.id.button_left);
        right = (Button) view.findViewById(R.id.button_right);
        leftDown = (Button) view.findViewById(R.id.button_leftDown);
        down = (Button) view.findViewById(R.id.button_down);
        rightDown = (Button) view.findViewById(R.id.button_rightDown);
        zoomOut = (Button) view.findViewById(R.id.button_zoomOut);
        zoomIn = (Button) view.findViewById(R.id.button_zoomIn);
        telefocus = (Button) view.findViewById(R.id.button_telefocus);
        proximityFocused = (Button) view.findViewById(R.id.button_proximityFocused);
        button_cruise = (Button) view.findViewById(R.id.button_cruise);
        returnBack = (Button) view.findViewById(R.id.returnBack);
        returnBack.setOnClickListener(this);
        speedSeekBar = (SeekBar) view.findViewById(R.id.seekBar_speed);
        numberSpinner = (Spinner) view.findViewById(R.id.spinner_number);
        //默认不自动调用
        numberSpinner.setSelection(0, true);

        Bundle bundle = getArguments();
        String comingNumber = bundle.getString(CommonConstantEntry.DATA_NUMBER);
        arrayAdapter = new ArrayAdapter<String>(getActivity(), R.layout.simple_spinner_item);
        update(comingNumber);
        numberSpinner.setOnItemSelectedListener(this);
        speedSeekBar.setMax(8);
        speedSeekBar.setProgress(ptzSpeed);
        setTouchListener();
    }

    @Override
    public void onStart()
    {
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.CLOSE_PTZ_VIEW);
        EventNotifyHelper.getInstance().addObserver(this, UiEventEntry.NOTIFY_PTZ_NUMBER_CHANGE);
        super.onStart();
    }

    @Override
    public void onStop()
    {
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.CLOSE_PTZ_VIEW);
        EventNotifyHelper.getInstance().removeObserver(this, UiEventEntry.NOTIFY_PTZ_NUMBER_CHANGE);
        super.onStop();
    }

    public void setControlPara(String number, String sessionId)
    {
        this.videoNum = number;
        this.sessionId = sessionId;
    }

    public void setTouchListener()
    {
        leftUp.setOnTouchListener(this);
        up.setOnTouchListener(this);
        rightUp.setOnTouchListener(this);
        left.setOnTouchListener(this);
        right.setOnTouchListener(this);
        leftDown.setOnTouchListener(this);
        down.setOnTouchListener(this);
        rightDown.setOnTouchListener(this);
        zoomOut.setOnTouchListener(this);
        zoomIn.setOnTouchListener(this);
        telefocus.setOnTouchListener(this);
        proximityFocused.setOnTouchListener(this);
        speedSeekBar.setOnTouchListener(this);

//        button_lookPreSetting.setOnClickListener(this);
//        button_setForSetting.setOnClickListener(this);
//        button_cruise.setOnTouchListener(this);
        speedSeekBar.setOnSeekBarChangeListener(this);

    }

    @Override
    public boolean onTouch(View v, MotionEvent event)
    {
        if (TextUtils.isEmpty(videoNum) || TextUtils.isEmpty(sessionId))
        {
            return false;
        }

        // TODO Auto-generated method stub
        switch (v.getId())
        {
            case R.id.button_leftUp:

                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_LEFT_UP_MOVE, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_LEFT_UP_MOVE_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }
                break;
            case R.id.button_up:

                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_UPWARD, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_UPWARD_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }
                break;
            case R.id.button_rightUp:

                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_RIGHT_UP_MOVE, ptzSpeed, ptzSpeed, 2);
                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_RIGHT_UP_MOVE_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }

                break;
            case R.id.button_left:

                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_TURN_LEFT, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_TURN_LEFT_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }
                break;
            case R.id.button_right:

                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_TURN_RIGHT, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_TURN_RIGHT_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }
                break;
            case R.id.button_leftDown:

                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_LEFT_DOWN_MOVE, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_LEFT_DOWN_MOVE_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }
                break;
            case R.id.button_down:

                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_DOWNWARD, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_DOWNWARD_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }

                break;
            case R.id.button_zoomIn:

                // TODO Auto-generated method stub

                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_ZOOM_IN, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_ZOOM_IN_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }

                break;
            case R.id.button_zoomOut:
                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_ZOOM_OUT, ptzSpeed, ptzSpeed, 2);

                        break;
                    case MotionEvent.ACTION_UP:

                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_ZOOM_OUT_STOP, ptzSpeed, ptzSpeed, 2);

                        break;
                    default:
                        break;
                }

                break;
            case R.id.button_proximityFocused:
                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:
                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_PROXIMITY_FOCUSED, ptzSpeed, ptzSpeed, 2);
                        break;
                    case MotionEvent.ACTION_UP:
                        sclDeviceService
                                .remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_PROXIMITY_FOCUSED_STOP, ptzSpeed, ptzSpeed, 2);
                        break;
                    default:
                        break;
                }

                break;
            case R.id.button_rightDown:
                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:
                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_RIGHT_DOWN_MOVE, ptzSpeed, ptzSpeed, 2);
                        break;
                    case MotionEvent.ACTION_UP:
                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_RIGHT_DOWN_MOVE_STOP, ptzSpeed, ptzSpeed, 2);
                        break;
                    default:
                        break;
                }

                break;

            case R.id.button_telefocus:
                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:
                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_TELEFOCUS, ptzSpeed, ptzSpeed, 2);
                        break;
                    case MotionEvent.ACTION_UP:
                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_TELEFOCUS_STOP, ptzSpeed, ptzSpeed, 2);
                        break;
                    default:
                        break;
                }
            case R.id.button_cruise:
                // TODO Auto-generated method stub
                switch (event.getAction())
                {
                    case MotionEvent.ACTION_DOWN:
                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_LIGHT_TRACE_START, ptzSpeed, ptzSpeed, 2);
                        break;
                    case MotionEvent.ACTION_UP:
                        sclDeviceService.remoteCameraControl(sessionId, videoNum, CommonEventEntry.CAMERA_CONTROL_LIGHT_TRACE_STOP, ptzSpeed, ptzSpeed, 2);
                        break;
                    default:
                        break;
                }
                break;
        }
        return false;
    }

    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser)
    {
        // TODO Auto-generated method stub

        tmpPtzSpeed = progress + 1;
    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar)
    {
        // TODO Auto-generated method stub
    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar)
    {
        ptzSpeed = tmpPtzSpeed;
        configHelper.putInt(UiConfigEntry.PREF_CONF_PTZ_SPEED, ptzSpeed);
    }

    @Override
    public void onClick(View v)
    {
        switch (v.getId())
        {
            case R.id.returnBack:
                parentActivity.backToPreFragment(R.id.container_right_content);
                break;
            default:
                break;
        }
    }

    @Override
    public void didReceivedNotification(int id, Object... args)
    {
        if (id == UiEventEntry.CLOSE_PTZ_VIEW)
        {
            parentActivity.backToPreFragment(R.id.container_right_content);
        }
        else if (id == UiEventEntry.NOTIFY_PTZ_NUMBER_CHANGE)
        {
            String comingNumber = (String) args[0];
            for (String eachNumber : numbers)
            {
                if (comingNumber.equals(eachNumber))
                {
                    int location = numbers.indexOf(eachNumber);
                    numberSpinner.setSelection(location);
                    controlNumber = comingNumber;
                    break;
                }
            }
        }
        else if (id == UiEventEntry.NOTIFY_VIDEO_NUMBER_CHANGE)
        {
            if(!TextUtils.isEmpty(controlNumber))
            {
                update(controlNumber);
            }else
            {
                numberSpinner.setSelection(NO_CONTROL_USER);
            }
           
        }
    }
    private void update(String controlNumber)
    {
        numbers = new ArrayList<String>();
        numbers.add("无");
        ArrayList<SurfaceView> svList = VideoFragment.getVideoList();
        if ((svList != null) && (svList.size() > 0))
        {
            for (SurfaceView surfaceView : svList)
            {
                String number = (String) surfaceView.getTag(R.id.call_number);
                if (!TextUtils.isEmpty(number))
                {
                    numbers.add(number);
                }
            }
        }
        arrayAdapter.addAll(numbers);
        arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        numberSpinner.setAdapter(arrayAdapter);
        numberSpinner.setSelection(NO_CONTROL_USER);
        for (String eachNumber : numbers)
        {
            if (controlNumber.equals(eachNumber))
            {
                int location = numbers.indexOf(eachNumber);
                numberSpinner.setSelection(location);
                break;
            }
        }
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id)
    {
        if(position==NO_CONTROL_USER)
        {
            controlNumber="";
            EventNotifyHelper.getInstance().postNotificationName(UiEventEntry.NOTIFY_VIDEO_PTZ_CHANGE, "");
        }else
        {
            String number=numbers.get(position);
            if(!number.equals(controlNumber))
            {
                controlNumber=number;
                EventNotifyHelper.getInstance().postNotificationName(UiEventEntry.NOTIFY_VIDEO_PTZ_CHANGE, number);
            }
        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent)
    {
        // TODO Auto-generated method stub
        
    }
}

package com.jiaxun.uil.module.contact;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.text.TextUtils;

import com.jiaxun.sdk.dcl.model.ContactModel;
import com.jiaxun.sdk.dcl.model.ContactNum;
import com.jiaxun.sdk.dcl.model.ContactPosInGroup;
import com.jiaxun.sdk.dcl.model.GroupModel;
import com.jiaxun.sdk.util.file.FileManager;
import com.jiaxun.sdk.util.file.Row;
import com.jiaxun.sdk.util.log.Log;
import com.jiaxun.uil.R;
import com.jiaxun.uil.UiApplication;
import com.jiaxun.uil.util.ToastUtil;
import com.jiaxun.uil.util.UiConfigEntry;
import com.jiaxun.uil.util.comparator.ContactComparatorByNum;

/**
 * 说明：
 *
 * @author  HeZhen
 *
 * @Date 2015-5-20
 */
public class ImportExportContacts
{
    private final static String TAG = ImportExportContacts.class.getSimpleName();
    private FileManager fm;
//    private File file;
    // key ： 组名 包括组关系，与父组之间“_”隔开 如：产品一部_新终端
    private Map<String, GroupModel> groupMap;
    private ArrayList<ContactModel> contactList;
    // key : 编号
    @Deprecated
    // 导入按键时不能使用，联系人经过手动添加后，数据不全
    private Map<Integer, ContactModel> contactNumMap;

    public ImportExportContacts()
    {
        groupMap = new HashMap<String, GroupModel>();
        contactList = new ArrayList<ContactModel>();
        contactNumMap = new HashMap<Integer, ContactModel>();
        fm = FileManager.getInstance();
//        File dir = Environment.getExternalStorageDirectory();
//        file = new File(dir, "contacts.csv");
    }

    // 此处设置的ID 都不是真实的用户ID，作为临时添加. 但是后面按键 也需要此ID。如果以此ID作为主键的话，手动添加时管理麻烦。
    // 可增加一个编号的字段
    public int readFile(String filepath)
    {
        try
        {
            contactList.clear();
            contactNumMap.clear();
            groupMap.clear();
            File file = new File(filepath);
            List<Row> rowsFromFile = fm.readFile(file);
            rowsFromFile.remove(0);
            for (Row row : rowsFromFile)
            {
                ContactModel contact = new ContactModel();
                String[] slips = row.rebuild();
                String num = slipsText(slips, 0);
                if (TextUtils.isEmpty(num))
                {
                    continue;
                }
                contact.setNumber(Integer.valueOf(num));
                contact.setName(slipsText(slips, 1));
                String type = slipsText(slips, 2);
                if (!TextUtils.isEmpty(type))
                {
                    contact.setType(type.contains("监控") ? 1 : 0);
                }

                StringBuffer groupName = new StringBuffer();
                GroupModel groupModel = null;
                for (int i = 3; i <= 7; i++)
                {
                    GroupModel ge = groupSet(slips, i, groupName);
                    if (ge != null)
                    {
                        groupModel = ge;
                    }
                }
                // 号码
                phoneNumSet(contact, slipsText(slips, 8), slipsText(slips, 9));
                phoneNumSet(contact, slipsText(slips, 10), slipsText(slips, 11));
                phoneNumSet(contact, slipsText(slips, 12), slipsText(slips, 13));
                phoneNumSet(contact, slipsText(slips, 14), slipsText(slips, 15));
                phoneNumSet(contact, slipsText(slips, 16), slipsText(slips, 17));

                if (groupModel != null)
                {
                    // 这么做的前提是，导入的联系人一个联系人只对应一个组。
                    ContactPosInGroup posGroup = new ContactPosInGroup();
                    posGroup.setParentGroup(groupModel);
                    String posStr = slipsText(slips, 18);
                    int p = TextUtils.isEmpty(posStr) ? 0 : Integer.valueOf(posStr);
                    posGroup.setPosition(p > 0 ? (p - 1) : 0);
                    contact.addPosGroup(posGroup);
                }
                contactList.add(contact);
                contactNumMap.put(contact.getNumber(), contact);
            }

        }
        catch (Exception e)
        {
            Log.info(TAG, e.toString());
            return 0;
        }
        return 1;
    }

    /**
     * 方法说明 :截取字段
     * @param src
     * @param count
     * @return
     * @author HeZhen
     * @Date 2015-8-18
     */
    private String slipsText(String[] src, int count)
    {
        if (count >= src.length)
        {
            return null;
        }
        return src[count].trim();
    }

    private void phoneNumSet(ContactModel contact, String type, String num)
    {
        if (TextUtils.isEmpty(type) || TextUtils.isEmpty(num))
        {
            return;
        }
        String typeNum = "";
        if (type.contains("用户"))
        {
            typeNum = "0";
        }
        else if (type.contains("移动"))
        {
            typeNum = "1";
        }
        else if (type.contains("住宅"))
        {
            typeNum = "2";
        }
        else if (type.contains("办公"))
        {
            typeNum = "3";
        }
        else
        {
            return;
        }
        ContactNum contactNum = new ContactNum();
        contactNum.setType(typeNum);
        contactNum.setNumber(num);
        contact.getPhoneNumList().add(contactNum);
    }

    private GroupModel groupSet(String[] src, int count, StringBuffer groupBuffer)
    {
        String groupName = slipsText(src, count);
        if (TextUtils.isEmpty(groupName))
        {
            return null;
        }
        GroupModel group = new GroupModel();
        if (count == 3)
        {
            if (!groupMap.containsKey(groupName))
            {
                group.setName(groupName);
                groupMap.put(groupName, group);
            }
            else
            {
                group = groupMap.get(groupName);
            }
            groupBuffer.append(groupName);
        }
        else if (count > 3)
        {
            groupBuffer.append("_" + groupName);
            String key = groupBuffer.toString();
            if (!groupMap.containsKey(key))
            {
                group.setName(key);
                groupMap.put(key, group);
            }
            else
            {
                return groupMap.get(key);
            }
        }

        return group;
    }

    public ArrayList<ContactModel> getContactList()
    {
        return contactList;
    }

    public Map<Integer, ContactModel> getContactNumMap()
    {
        return contactNumMap;
    }

    public Map<String, GroupModel> getGroupMap()
    {
        return groupMap;
    }

    public boolean exportToCSV(String pathName, String fileName)
    {
        ArrayList<ContactModel> contactList = (ArrayList<ContactModel>) UiApplication.getInstance().getContactService().getContactList().clone();
        boolean isError = true;
        String resion = null;
        if (TextUtils.isEmpty(pathName))
        {
        }
        else if (contactList == null || contactList.size() == 0)
        {
            resion = "无数据，无法导出！";
        }
        else if (TextUtils.isEmpty(fileName))
        {
            resion = "文件名不能为空！";
        }
        else
        {
            isError = false;
        }
        if (isError)
        {
            if (!TextUtils.isEmpty(resion))
            {
                ToastUtil.showUiToast(resion);
            }
            return false;
        }
        List<String> rows = new ArrayList<String>();
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append("编号,").append("姓名,").append("用户类型,").append("一级部门,").append("二级部门,").append("三级部门,").append("四级部门,").append("五级部门,")
                .append("号码类型,").append("号码1,").append("号码类型,").append("号码2,").append("号码类型,").append("号码3,").append("号码类型,").append("号码4,").append("号码类型,")
                .append("号码5,").append("排位");
        rows.add(stringBuffer.toString());
        Collections.sort(contactList, new ContactComparatorByNum());
        for (ContactModel mContactModel : contactList)
        {
            stringBuffer.setLength(0);
            stringBuffer.append(mContactModel.getNumber()).append(",");
            stringBuffer.append(mContactModel.getName()).append(",");
            if (mContactModel.getType() == 0)
            {
                stringBuffer.append("普通用户").append(",");
            }
            else
            {
                stringBuffer.append("监控用户").append(",");
            }
            ArrayList<ContactPosInGroup> parentPosGroupList = mContactModel.getParentGroupList();
            ContactPosInGroup posGroup = parentPosGroupList.size() > 0 ? parentPosGroupList.get(0) : null;
            ArrayList<GroupModel> groupList = new ArrayList<GroupModel>();
            if (posGroup != null)
            {
                GroupModel group = posGroup.getParentGroup();
                if (group != null)
                {
                    groupList.add(group);
                    getParentGroup(groupList, group);
                }
            }
            stringBuffer.append(getGroupName(groupList, 1)).append(",").append(getGroupName(groupList, 2)).append(",").append(getGroupName(groupList, 3))
                    .append(",").append(getGroupName(groupList, 4)).append(",").append(getGroupName(groupList, 5)).append(",");

            ArrayList<ContactNum> phoneNumList = mContactModel.getPhoneNumList();

            String[] phoneType = UiApplication.getInstance().getResources().getStringArray(R.array.phone_all_categary);
            int size = phoneType.length;
            int restNum = UiConfigEntry.PHONE_NUM_MAX - phoneNumList.size();
            for (ContactNum contactNum : phoneNumList)
            {
                int type = Integer.valueOf(contactNum.getType());
                String typeText = type < size ? phoneType[type] : "";
                stringBuffer.append(typeText).append(",").append(contactNum.getNumber()).append(",");
            }
            while (restNum > 0)
            {
                stringBuffer.append(",").append(",");
                restNum--;
            }

            stringBuffer.append(posGroup.getPosition() + 1);
            rows.add(stringBuffer.toString());
        }
        return fm.writeFile(rows, pathName, fileName + ".csv");
    }

    private String getGroupName(ArrayList<GroupModel> groupList, int level)
    {
        int size = groupList.size();
        int index = size - level;
        String name = null;
        if (index >= 0)
        {
            name = groupList.get(index).getName();
        }
        return name == null ? "" : name;
    }

    private ArrayList<GroupModel> getParentGroup(ArrayList<GroupModel> groupList, GroupModel group)
    {
        GroupModel parentGroup = group.getParent();
        if (parentGroup != null)
        {
            groupList.add(parentGroup);
            getParentGroup(groupList, parentGroup);
        }
        return groupList;
    }
}

package com.jiaxun.setting.ui.fragment;

import java.util.ArrayList;

import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.jiaxun.sdk.dcl.model.ContactModel;
import com.jiaxun.sdk.dcl.model.ContactNum;
import com.jiaxun.sdk.dcl.model.GroupModel;
import com.jiaxun.sdk.dcl.model.ContactPosInGroup;
import com.jiaxun.uil.R;
import com.jiaxun.uil.UiApplication;
import com.jiaxun.uil.ui.fragment.BaseFragment;
import com.jiaxun.uil.util.ToastUtil;
import com.jiaxun.uil.util.UiConfigEntry;
import com.jiaxun.uil.util.UiEventEntry;
import com.jiaxun.uil.util.UiUtils;
import com.jiaxun.uil.util.ContactUtil;
import com.jiaxun.uil.util.eventnotify.EventNotifyHelper;

/**
 * 说明：添加通讯录联系人/编辑联系人
 *
 * @author  hezhen
 *
 * @Date 2015-3-11
 */
public class ContactAddFragment extends BaseFragment implements OnClickListener
{
    private LinearLayout controlLayout;
    private EditText nameEdit;
    private EditText controlEdit;
    private TextView confCheckedTv;
    private Spinner mSpinner;
    private LinearLayout container;
    private TextView addPhoneTv;
    private Button cancelBtn;
    private Button accomplishBtn;
    ArrayList<PhoneItem> phoneItems;
    private ContactModel contactModel;
    private GroupModel groupModel;
    /**
     * 是否为添加联系人 true: 添加联系人 false:编辑联系人
     */
    boolean isAdd = false;

    private int typePos = 0;

    ArrayList<String> phoneTypeList = new ArrayList<String>();

    private String confNum = null;// 入会号码

    Drawable checkOn;
    Drawable checkOff;

    private ContactModel getNewContact()
    {
        if (contactModel == null)
        {
            contactModel = new ContactModel();
        }
        return contactModel;
    }

    @Override
    public void onClick(View v)
    {
        int id = v.getId();
        switch (id)
        {
            case R.id.tv_add_new_phone:
                if (phoneItems.size() >= UiConfigEntry.PHONE_NUM_MAX)
                {
                    String notice = String.format(UiApplication.getInstance().getResources().getString(R.string.notice_contact_number_max),
                            UiConfigEntry.PHONE_NUM_MAX);
                    ToastUtil.showToast(notice);
                }
                else
                {
                    addNewPhoneNum();
                }
                break;
            case R.id.btn_create:
                contactOperate();
                UiUtils.hideSoftKeyboard(getActivity());
                break;
            case R.id.btn_cancel:
                UiUtils.hideSoftKeyboard(getActivity());
                EventNotifyHelper.getInstance().postNotificationName(UiEventEntry.SETTING_MODIFY_CONTACT);
                break;
            case R.id.confnum_check_tv:
                selectPhoneItem(null);
                break;
        }
    }

    @Override
    public void initComponentViews(View view)
    {
        checkOn = UiApplication.getInstance().getResources().getDrawable(R.drawable.btn_check_on_holo_light);
        checkOff = UiApplication.getInstance().getResources().getDrawable(R.drawable.btn_check_off_holo_light);

        parentActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        Bundle bundle = getArguments();
        if (bundle != null)
        {
            this.isAdd = bundle.getBoolean("isAdd", true);
            int id = bundle.getInt("id");
            int position = bundle.getInt("position");
            if (isAdd)
            {
                groupModel = UiApplication.getContactService().getDepById(id);
                ContactPosInGroup posGroup = new ContactPosInGroup();
                posGroup.setParentGroup(groupModel);
                posGroup.setPosition(position);
                getNewContact().addPosGroup(posGroup);
            }
            else
            {
                ContactModel contact = UiApplication.getContactService().getContactById(id);
                contactModel = contact.clone();
            }

        }
        nameEdit = (EditText) view.findViewById(R.id.name_edit);
        mSpinner = (Spinner) view.findViewById(R.id.spinner1);
        container = (LinearLayout) view.findViewById(R.id.container);
        controlLayout = (LinearLayout) view.findViewById(R.id.linlay_control);
        controlEdit = (EditText) view.findViewById(R.id.edt_control_num);
        confCheckedTv = (TextView) view.findViewById(R.id.confnum_check_tv);
        addPhoneTv = (TextView) view.findViewById(R.id.tv_add_new_phone);
        phoneItems = new ArrayList<ContactAddFragment.PhoneItem>();
        cancelBtn = (Button) view.findViewById(R.id.btn_cancel);
        accomplishBtn = (Button) view.findViewById(R.id.btn_create);

        addPhoneTv.setOnClickListener(this);
        cancelBtn.setOnClickListener(this);
        accomplishBtn.setOnClickListener(this);
        phoneTypeList = UiApplication.getContactService().getPhoneTypes();

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(parentActivity, R.layout.simple_spinner_item, UiApplication.getContactService()
                .getContactTypes());
        adapter.setDropDownViewResource(R.layout.adapter_spinner_dropdown_item);
        mSpinner.setAdapter(adapter);
        confCheckedTv.setOnClickListener(this);
        if (!isAdd && contactModel != null)
        {
            nameEdit.setText(contactModel.getName());
            ArrayList<ContactNum> phoneList = contactModel.getPhoneNumList();
            int size = phoneList.size();
            if (size <= 0)
            {
                return;
            }
            String contactTypeName = contactModel.getTypeName();
            typePos = UiApplication.getContactService()
            .getContactTypes().indexOf(contactTypeName);
            if(typePos >= 0)
            {
                mSpinner.setSelection(typePos);
            }
            PhoneItem confPhone = null;
            String confNum = contactModel.getConfNum();
            boolean isvdContact = isVdContact();
            
            controlLayout.setVisibility(isvdContact?View.VISIBLE:View.GONE);
            
            for (int i = 0; i < size; i++)
            {
                ContactNum contactNum = phoneList.get(i);
                String phoneNum = contactNum.getNumber();
                if (i == 0 && isvdContact)
                {
                    controlEdit.setText(phoneNum);
                    continue;
                }
                PhoneItem phoneItem = addNewPhoneNum();
                phoneItem.setPhoneText(phoneNum);
                phoneItem.setPhoneType(contactNum.getTypeName());
                if (!TextUtils.isEmpty(confNum) && confNum.equals(phoneNum))
                {
                    confPhone = phoneItem;
                }
            }
            selectPhoneItem(confPhone);
        }
        else
        {
            addNewPhoneNum();
            mSpinner.setOnItemSelectedListener(new OnItemSelectedListener()
            {

                @Override
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id)
                {
                    typePos = position;
                    if (isVdContact())
                    {
                        controlLayout.setVisibility(View.VISIBLE);
                    }
                    else
                    {
                        controlLayout.setVisibility(View.GONE);
                    }
                }

                @Override
                public void onNothingSelected(AdapterView<?> parent)
                {

                }
            });
        }

    }

    @Override
    public int getLayoutView()
    {
        return R.layout.fragment_contact_addcontact;
    }

    /**
     * 方法说明 :添加新号码
     * @author HeZhen
     * @Date 2015-4-22
     */
    private PhoneItem addNewPhoneNum()
    {
        final PhoneItem phoneItem = new PhoneItem();
        container.addView(phoneItem.getView());
        phoneItems.add(phoneItem);
        phoneItem.setDeletePhoneItem(new DeletePhoneItem()
        {
            @Override
            public void deleteSelf(PhoneItem phoneItem)
            {
                container.removeView(phoneItem.getView());
                phoneItems.remove(phoneItem);
            }
        });
        return phoneItem;
    }

    /**
     * 方法说明 :是监控或调度用户
     * @return
     * @author hz
     * @Date 2015-9-29
     */
    private boolean isVdContact()
    {
        return typePos <= 1;
    }

    private void selectPhoneItem(PhoneItem selectItem)
    {
        confNum = null;
        for (PhoneItem phoneItem : phoneItems)
        {
            phoneItem.confIsCheck = false;
            phoneItem.setCheckDrawable(checkOff);
        }
        confCheckedTv.setCompoundDrawablesWithIntrinsicBounds(checkOff, null, null, null);
        if (selectItem == null)
        {
            if (isVdContact())// 监控调度用户
            {
                confNum = controlEdit.getText().toString();
                confCheckedTv.setCompoundDrawablesWithIntrinsicBounds(checkOn, null, null, null);
            }
            return;
        }
        selectItem.confIsCheck = true;
        selectItem.setCheckDrawable(checkOn);
        confNum = selectItem.getPhoneNum().getNumber();
    }

    /**
    * 方法说明 :对联系人进行添加或更新操作
    * @author hz
    * @Date 2015-9-29
    */
    private void contactOperate()
    {
        ContactModel contactModel;
        ArrayList<ContactNum> contactNums;
        if (isAdd)
        {
            if (groupModel == null)
            {
                return;
            }
            contactModel = new ContactModel();
            contactNums = new ArrayList<ContactNum>();
            contactModel.setPhoneNumList(contactNums);
        }
        else
        {
            contactModel = this.contactModel;
            contactNums = contactModel.getPhoneNumList();
        }

        String name = nameEdit.getText().toString();

        int typePos = mSpinner.getSelectedItemPosition();
        String typeName = UiApplication.getContactService().getContactTypes().get(typePos);

        if (!verifyInputName(name))
        {
            return;
        }
        else
        {
            contactModel.setName(name);
        }
        if (!verifyConfNum())
        {
            return;
        }
        else
        {
            contactModel.setConfNum(confNum);
        }
        if (TextUtils.isEmpty(typeName))
        {
            return;
        }
        else
        {
            contactModel.setTypeName(typeName);
        }
        contactNums.clear();
        if (isVdContact())// 调度和监控用户
        {
            String phoneNum = controlEdit.getText().toString();
            if (TextUtils.isEmpty(phoneNum))
            {
                ToastUtil.showToast(parentActivity, null, R.string.notice_number_not_null);
                return;
            }
            else
            {
                ContactNum contactNum = new ContactNum();
                contactNum.setNumber(phoneNum);
                if (ContactUtil.isVsByContactType(typeName)) // 监控号码
                {
                    contactNum.setTypeName(ContactUtil.getVsPhoneTypeName());
                }
                else if (ContactUtil.isDsByContactType(typeName))
                {
                    contactNum.setTypeName(ContactUtil.getDsPhoneTypeName());
                }
                contactNums.add(contactNum);
            }
        }
        for (PhoneItem phoneItem : phoneItems)
        {
            String pNum = phoneItem.getPhoneNum().getNumber();
            if (!TextUtils.isEmpty(pNum))
            {
                contactNums.add(phoneItem.getPhoneNum());
            }
        }
        if (isAdd)// 如果是添加联系人，则初始化位置和编号
        {
            contactModel.setNumber(ContactUtil.contactMaxNum + 1);
            // 联系人位置加到最后面
            int position = 0;
            for (GroupModel group : groupModel.getChildrenDepList())
            {
                if (position < group.getPosition())
                {
                    position = group.getPosition();
                }
            }
            for (ContactModel contact : groupModel.getChildrenContactList())
            {
                ContactPosInGroup posGroup = contact.getPosGroup(groupModel.getId());
                if (posGroup != null && position < posGroup.getPosition())
                {
                    position = posGroup.getPosition();
                }
            }
            if (position == 0)
            {
                position = groupModel.getChildrenContactList().size() + groupModel.getChildrenDepList().size();
            }
            else
            {
                position++;
            }
            ContactPosInGroup posGroup = new ContactPosInGroup();
            posGroup.setPosition(position);
            posGroup.setParentGroup(groupModel);
            contactModel.addPosGroup(posGroup);
            UiApplication.getContactService().addContact(contactModel);
        }
        else
        {
            UiApplication.getContactService().modifyContact(contactModel);
        }

    }

    /**
     * 方法说明 : 验证用户号码
     * @param phoneNum
     * @return
     * @author HeZhen
     * @Date 2015-7-9
     */
    private boolean verifyInputPhone(String phoneNum)
    {
        if (TextUtils.isEmpty(phoneNum))
        {
            ToastUtil.showToast(parentActivity, null, R.string.notice_number_not_null);
            return false;
        }
        else if (phoneNum.equals(UiApplication.getConfigService().getAccountNumber()))
        {
            ToastUtil.showToast("添加号码非法");
            return false;
        }

        return true;
    }

    /**
     * 方法说明 :验证输入名称
     * @param name
     * @return
     * @author HeZhen
     * @Date 2015-7-9
     */
    private boolean verifyInputName(String name)
    {
        if (TextUtils.isEmpty(name))
        {
            ToastUtil.showToast(parentActivity, null, R.string.notice_name_not_null);
            return false;
        }
        if (UiUtils.getLength(name) > UiConfigEntry.CONTACT_NAME_MAX)
        {
            String content = String.format(UiApplication.getInstance().getResources().getString(R.string.notice_name_max), UiConfigEntry.CONTACT_NAME_MAX);
            ToastUtil.showToast(null, content);
            return false;
        }
        return true;
    }

    private boolean verifyConfNum()
    {
        if (TextUtils.isEmpty(confNum))
        {
            ToastUtil.showToast("参会号码不能为空，请选择参会");
            return false;
        }
        return true;
    }

    /**
     * 说明： 添加新号码 逻辑
     *
     * @Date 2015-5-12
     */
    class PhoneItem
    {
        View view;
        ContactNum phoneNum;
        DeletePhoneItem deletePhoneItem;
        boolean confIsCheck = false;// 会议号码是否选中
        TextView checkText;

        public PhoneItem()
        {
            phoneNum = new ContactNum();
        }

        public ContactNum getPhoneNum()
        {
            if (phoneNum == null)
            {
                phoneNum = new ContactNum();
            }
            return phoneNum;
        }

        public void setPhoneText(String text)
        {
            if (TextUtils.isEmpty(text))
            {
                return;
            }
            ((EditText) getView().findViewById(R.id.phone_edit)).setText(text);
            getPhoneNum().setNumber(text);
        }

        public void setPhoneType(String typeName)
        {
            if (TextUtils.isEmpty(typeName))
            {
                return;
            }
            int seletion = 0;
            int size = UiApplication.getContactService().getPhoneTypes().size();
            for (int i = 0; i < size; i++)
            {
                String tyName = UiApplication.getContactService().getPhoneTypes().get(i);
                if (typeName.equals(tyName))
                {
                    seletion = i;
                    break;
                }
            }
            ((Spinner) getView().findViewById(R.id.type_spinner)).setSelection(seletion > 0 ? seletion : 0);
            getPhoneNum().setTypeName(typeName);
        }

        public View getView()
        {
            if (view == null)
            {
                view = LayoutInflater.from(getActivity()).inflate(R.layout.include_contact_addphone, null);
                Spinner spinner = (Spinner) view.findViewById(R.id.type_spinner);
                ArrayAdapter<String> adapter = new ArrayAdapter<String>(parentActivity, R.layout.simple_spinner_item, phoneTypeList);
                adapter.setDropDownViewResource(R.layout.adapter_spinner_dropdown_item);
                spinner.setAdapter(adapter);
                spinner.setOnItemSelectedListener(new OnItemSelectedListener()
                {
                    @Override
                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id)
                    {
                        String typeName = phoneTypeList.get(position);
                        getPhoneNum().setTypeName(typeName);
                    }

                    @Override
                    public void onNothingSelected(AdapterView<?> parent)
                    {

                    }
                });
                ((EditText) view.findViewById(R.id.phone_edit)).addTextChangedListener(new TextWatcher()
                {
                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count)
                    {
                        String message = s.toString();
                        getPhoneNum().setNumber(message);
                        if (confIsCheck)
                        {
                            confNum = message;
                        }
                    }

                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after)
                    {
                    }

                    @Override
                    public void afterTextChanged(Editable s)
                    {
                    }
                });
                view.findViewById(R.id.delete).setOnClickListener(new OnClickListener()
                {
                    @Override
                    public void onClick(View v)
                    {
                        if (confIsCheck)
                        {
                            selectPhoneItem(null);
                        }
                        deletePhoneItem.deleteSelf(PhoneItem.this);
                    }
                });
                checkText = (TextView) view.findViewById(R.id.checkedTextView1);
                checkText.setOnClickListener(new OnClickListener()
                {

                    @Override
                    public void onClick(View v)
                    {
                        selectPhoneItem(PhoneItem.this);
                    }
                });
            }
            return view;
        }

        public void setCheckDrawable(Drawable drawable)
        {
            checkText.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);
        }

        public void setDeletePhoneItem(DeletePhoneItem deletePhoneItem)
        {
            this.deletePhoneItem = deletePhoneItem;
        }
    }

    public interface DeletePhoneItem
    {
        void deleteSelf(PhoneItem phoneItem);
    };
}
